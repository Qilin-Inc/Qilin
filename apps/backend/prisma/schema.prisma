generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id                        String        @id @default(auto()) @map("_id") @db.ObjectId
  email                     String        @unique(map: "email_1")
  password                  String
  username                  String        @unique(map: "username_1")
  verifyToken               String?
  verifyTokenExpiry         DateTime?     @db.Date
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?     @db.Date
  profileDescription        String?
  friends                   String[]      @db.ObjectId
  friendsCount              Int           @default(0)
  role                      ROLE          @default(USER)
  isBanned                  Boolean       @default(false)
  rating                    Float         @default(0)
  numberOfRatings           Int           @default(0)
  ValorantUser              ValorantUser?
  TournamentsOrganized      Tournament[]  @relation("OrganizedTournaments")
  TournamentsJoined         Tournament[]  @relation("JoinedTournaments", fields: [TournamentsJoinedIds], references: [id])
  TournamentsJoinedIds      String[]      @db.ObjectId
}

model ValorantUser {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  tag          String
  puuid        String
  region       String?
  accountLevel Int?
  rank         String
  mmr          Int
  card         Card    @relation(fields: [cardId], references: [id])
  user         users   @relation(fields: [userId], references: [id])
  userId       String  @unique @db.ObjectId
  cardId       String  @db.ObjectId
}

model Card {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  small        String
  large        String
  wide         String
  ValorantUser ValorantUser[]
}

model Tournament {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  owner     users             @relation("OrganizedTournaments", fields: [ownerId], references: [id])
  ownerId   String            @db.ObjectId
  players   users[]           @relation("JoinedTournaments", fields: [playerIds], references: [id])
  playerIds String[]          @db.ObjectId
  name      String
  game      String
  startDate DateTime
  endDate   DateTime
  status    TOURNAMENT_STATUS @default(OPEN)
}

model Reports {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  username  String             
  reporteduser String         
  description  String 
}

enum ROLE {
  USER
  MANAGER
  ADMIN
}

enum TOURNAMENT_STATUS {
  OPEN
  CLOSED
}
